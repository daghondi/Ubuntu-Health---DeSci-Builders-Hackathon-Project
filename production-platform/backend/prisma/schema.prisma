generator client {generator client {// SQLite-compatible Prisma schema for development// Simplified SQLite-compatible Prisma schema for development

  provider = "prisma-client-js"

}  provider = "prisma-client-js"



datasource db {}// Production will use PostgreSQL with full JSON and enum support// Production will use PostgreSQL with full JSON and enum support

  provider = "sqlite"

  url      = "file:./dev.db"

}

datasource db {

model User {

  id            String   @id @default(cuid())  provider = "sqlite"

  createdAt     DateTime @default(now())

  updatedAt     DateTime @updatedAt  url      = "file:./dev.db"generator client {generator client {

  walletAddress String  @unique

  userType      String  @default("PATIENT")}

  email         String?

    provider = "prisma-client-js"  provider = "prisma-client-js"

  @@map("users")

}model User {



model Treatment {  id            String   @id @default(cuid())}}

  id            String   @id @default(cuid())

  createdAt     DateTime @default(now())  createdAt     DateTime @default(now())

  updatedAt     DateTime @updatedAt

  patientWallet String  updatedAt     DateTime @updatedAt

  title         String

  description   String  

  estimatedCost Float

  status        String   @default("PENDING")  walletAddress String  @uniquedatasource db {datasource db {

  

  @@map("treatments")  publicKey     String?

}

  userType      String  @default("PATIENT")  provider = "sqlite"  provider = "sqlite"

model Sponsorship {

  id            String   @id @default(cuid())  email         String?

  createdAt     DateTime @default(now())

  updatedAt     DateTime @updatedAt  isVerified    Boolean @default(false)  url      = "file:./dev.db"  url      = "file:./dev.db"

  sponsorWallet String

  treatmentId   String  lastLogin     DateTime?

  amount        Float

  status        String   @default("PENDING")  }}

  

  @@map("sponsorships")  patientProfile   PatientProfile?

}
  sponsorProfile   SponsorProfile?

  providerProfile  ProviderProfile?

  treatments       Treatment[]model User {model User {

  sponsorships     Sponsorship[]

  dataContributions DataContribution[]  id        String   @id @default(cuid())  id        String   @id @default(cuid())

  governanceVotes  Vote[]

    createdAt DateTime @default(now())  createdAt DateTime @default(now())

  @@map("users")

}  updatedAt DateTime @updatedAt  updatedAt DateTime @updatedAt



model PatientProfile {    

  id               String   @id @default(cuid())

  createdAt        DateTime @default(now())  // Blockchain identity  // Blockchain identity

  updatedAt        DateTime @updatedAt

  userId           String   @unique  walletAddress String  @unique  walletAddress String  @unique

  

  dateOfBirth      DateTime?  publicKey     String?  publicKey     String?

  gender           String?

  location         String?    

  medicalHistory   String?

  currentCondition String?  // Profile information  // User profile

  treatmentHistory String?

  emergencyContacts String?  userType    String @default("PATIENT")  email         String?  @unique

  insuranceProvider String?

  policyNumber     String?  email       String?  username      String?  @unique

  coverageDetails  String?

    isVerified  Boolean @default(false)  firstName     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    lastLogin   DateTime?  lastName      String?

  @@map("patient_profiles")

}    profileImage  String?



model SponsorProfile {  // Relationships  

  id               String   @id @default(cuid())

  createdAt        DateTime @default(now())  patientProfile   PatientProfile?  // User type and verification

  updatedAt        DateTime @updatedAt

  userId           String   @unique  sponsorProfile   SponsorProfile?  userType      UserType @default(PATIENT)

  

  sponsorType      String   @default("INDIVIDUAL")  providerProfile  ProviderProfile?  verified      Boolean  @default(false)

  organizationName String?

  taxId            String?    verifiedAt    DateTime?

  contactPerson    String?

  contactEmail     String?  // Activity tracking  

  contactPhone     String?

  treatmentTypes   String?  treatments       Treatment[]  // Privacy settings

  regions          String?

  ageRanges        String?  sponsorships     Sponsorship[]  dataSharing   Boolean  @default(false)

  totalContributed Float    @default(0)

  activeSponsoring Int      @default(0)  dataContributions DataContribution[]  researchOpt   Boolean  @default(false)

  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  governanceVotes  Vote[]  

  

  @@map("sponsor_profiles")    // Relationships

}

  @@map("users")  patientProfile    PatientProfile?

model ProviderProfile {

  id              String   @id @default(cuid())}  sponsorProfile    SponsorProfile?

  createdAt       DateTime @default(now())

  updatedAt       DateTime @updatedAt  providerProfile   ProviderProfile?

  userId          String   @unique

  model PatientProfile {  treatments        Treatment[]

  license         String   @unique

  specialty       String  id        String   @id @default(cuid())  sponsorships      Sponsorship[]

  institution     String?

  yearsExperience Int?  createdAt DateTime @default(now())  dataContributions DataContribution[]

  isVerified      Boolean  @default(false)

    updatedAt DateTime @updatedAt  governanceVotes   GovernanceVote[]

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  treatments Treatment[]    

  milestones Milestone[]

    // User reference  @@map("users")

  @@map("provider_profiles")

}  userId String @unique}



model Treatment {  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  id                String   @id @default(cuid())

  createdAt         DateTime @default(now())  model PatientProfile {

  updatedAt         DateTime @updatedAt

  patientId         String  // Personal information  id     String @id @default(cuid())

  providerId        String?

    dateOfBirth      DateTime?  userId String @unique

  treatmentType     String   @default("OTHER")

  title             String  gender           String?  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  description       String

  estimatedCost     Float  location         String?  

  urgencyLevel      String   @default("MEDIUM")

  estimatedDuration Int?    // Medical information (encrypted)

  targetStartDate   DateTime?

  facilityName      String  // Medical information (stored as text instead of JSON)  medicalHistory   Json?

  facilityLocation  String

  providerInfo      String?  medicalHistory   String?  currentCondition String?

  status            String   @default("PENDING")

    currentCondition String?  treatmentHistory Json?

  patient      User                   @relation(fields: [patientId], references: [id])

  provider     ProviderProfile?       @relation(fields: [providerId], references: [id])  treatmentHistory String?  

  sponsorships Sponsorship[]

  milestones   Milestone[]  emergencyContacts String?  // Emergency contacts

  

  @@map("treatments")    emergencyContacts Json?

}

  // Insurance information  

model Sponsorship {

  id                  String   @id @default(cuid())  insuranceProvider String?  // Insurance information

  createdAt           DateTime @default(now())

  updatedAt           DateTime @updatedAt  policyNumber      String?  insuranceProvider String?

  sponsorId           String

  treatmentId         String  coverageDetails   String?  policyNumber      String?

  

  amount              Float    coverageDetails   Json?

  milestoneConditions String

  escrowConditions    String?  @@map("patient_profiles")  

  escrowAccount       String?

  transactionHash     String?}  createdAt DateTime @default(now())

  status              String   @default("PENDING")

    updatedAt DateTime @updatedAt

  sponsor    User        @relation(fields: [sponsorId], references: [id])

  treatment  Treatment   @relation(fields: [treatmentId], references: [id])model SponsorProfile {  

  milestones Milestone[]

    id        String   @id @default(cuid())  @@map("patient_profiles")

  @@map("sponsorships")

}  createdAt DateTime @default(now())}



model Milestone {  updatedAt DateTime @updatedAt

  id               String   @id @default(cuid())

  createdAt        DateTime @default(now())  model SponsorProfile {

  updatedAt        DateTime @updatedAt

  sponsorshipId    String  // User reference  id     String @id @default(cuid())

  providerId       String?

    userId String @unique  userId String @unique

  title            String

  description      String  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetDate       DateTime?

  completionDate   DateTime?    

  payoutAmount     Float

  status           String   @default("PENDING")  // Organization information  // Sponsor information

  verificationData String?

  verifiedBy       String?  sponsorType      String @default("INDIVIDUAL")  organizationName String?

  verifiedAt       DateTime?

    organizationName String?  sponsorType      SponsorType @default(INDIVIDUAL)

  sponsorship Sponsorship      @relation(fields: [sponsorshipId], references: [id])

  provider    ProviderProfile? @relation(fields: [providerId], references: [id])  taxId            String?  

  

  @@map("milestones")    // Financial capacity

}

  // Contact information  totalContributed Decimal @default(0)

model DataContribution {

  id            String   @id @default(cuid())  contactPerson String?  maxContribution  Decimal?

  createdAt     DateTime @default(now())

  updatedAt     DateTime @updatedAt  contactEmail  String?  

  contributorId String

    contactPhone  String?  // Preferences

  dataType      String   @default("OTHER")

  title         String    treatmentTypes   String[]

  description   String

  accessLevel   String   @default("RESTRICTED")  // Preferences (stored as text)  regions          String[]

  sharingTerms  String?

  ipfsHash      String?  treatmentTypes   String?  ageRanges        Json?

  encryptionKey String?

  accessNFT     String?  regions          String?  

  rewardAmount  Float    @default(0)

    ageRanges        String?  createdAt DateTime @default(now())

  contributor User @relation(fields: [contributorId], references: [id])

      updatedAt DateTime @updatedAt

  @@map("data_contributions")

}  // Financial tracking  



model GovernanceProposal {  totalContributed Float @default(0)  @@map("sponsor_profiles")

  id          String   @id @default(cuid())

  createdAt   DateTime @default(now())  activeSponsoring Int   @default(0)}

  updatedAt   DateTime @updatedAt

    

  proposer    String

  title       String  @@map("sponsor_profiles")model ProviderProfile {

  description String

  category    String   @default("OTHER")}  id     String @id @default(cuid())

  votingStart DateTime

  votingEnd   DateTime  userId String @unique

  status      String   @default("DRAFT")

  model ProviderProfile {  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  votes Vote[]

    id        String   @id @default(cuid())  

  @@map("governance_proposals")

}  createdAt DateTime @default(now())  // Professional information



model Vote {  updatedAt DateTime @updatedAt  license          String   @unique

  id          String   @id @default(cuid())

  createdAt   DateTime @default(now())    specialty        String[]

  proposalId  String

  voterId     String  // User reference  institution      String?

  

  choice      String   @default("ABSTAIN")  userId String @unique  yearsExperience  Int?

  votingPower Float

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)  

  proposal GovernanceProposal @relation(fields: [proposalId], references: [id])

  voter    User              @relation(fields: [voterId], references: [id])    // Verification

  

  @@unique([proposalId, voterId])  // Professional information  licenseVerified  Boolean  @default(false)

  @@map("votes")

}  license          String   @unique  institutionVerified Boolean @default(false)

  specialty        String  

  institution      String?  createdAt DateTime @default(now())

  yearsExperience  Int?  updatedAt DateTime @updatedAt

    

  // Verification  @@map("provider_profiles")

  isVerified Boolean @default(false)}

  

  // Relationshipsmodel Treatment {

  treatments Treatment[]  id        String   @id @default(cuid())

  milestones Milestone[]  createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

  @@map("provider_profiles")  

}  // Patient information

  patientId String

model Treatment {  patient   User   @relation(fields: [patientId], references: [id])

  id        String   @id @default(cuid())  

  createdAt DateTime @default(now())  // Treatment details

  updatedAt DateTime @updatedAt  treatmentType     TreatmentType

    description       String

  // Patient reference  urgencyLevel      UrgencyLevel  @default(MEDIUM)

  patientId String  

  patient   User   @relation(fields: [patientId], references: [id])  // Financial information

    estimatedCost     Decimal

  // Provider reference  currency          String        @default("USD")

  providerId String?  fundingGoal       Decimal

  provider   ProviderProfile? @relation(fields: [providerId], references: [id])  currentFunding    Decimal       @default(0)

    

  // Treatment details  // Medical facility

  treatmentType    String @default("OTHER")  facilityName      String

  title            String  facilityLocation  String

  description      String  providerInfo      Json?

  estimatedCost    Float  

  urgencyLevel     String @default("MEDIUM")  // Timeline

    requestedStartDate DateTime?

  // Timeline  approvedStartDate  DateTime?

  estimatedDuration Int?  completionDate     DateTime?

  targetStartDate   DateTime?  

    // Status and verification

  // Location  status            TreatmentStatus @default(PENDING)

  facilityName     String  verificationHash  String?

  facilityLocation String  

  providerInfo     String?  // Blockchain integration

    nftTokenId        String?

  // Status  smartContractAddr String?

  status String @default("PENDING")  

    // Relationships

  // Relationships  sponsorships      Sponsorship[]

  sponsorships Sponsorship[]  milestones        Milestone[]

  milestones   Milestone[]  documents         Document[]

    

  @@map("treatments")  @@map("treatments")

}}



model Sponsorship {model Sponsorship {

  id        String   @id @default(cuid())  id        String   @id @default(cuid())

  createdAt DateTime @default(now())  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt  updatedAt DateTime @updatedAt

    

  // References  // Participants

  sponsorId   String  sponsorId   String

  sponsor     User      @relation(fields: [sponsorId], references: [id])  sponsor     User      @relation(fields: [sponsorId], references: [id])

  treatmentId String  treatmentId String

  treatment   Treatment @relation(fields: [treatmentId], references: [id])  treatment   Treatment @relation(fields: [treatmentId], references: [id])

    

  // Sponsorship terms  // Financial details

  amount              Float  amount              Decimal

  milestoneConditions String  currency            String @default("USD")

  escrowConditions    String?  tokenAmount         Decimal?

    

  // Blockchain references  // Sponsorship terms

  escrowAccount   String?  milestoneConditions Json

  transactionHash String?  escrowConditions    Json?

    

  // Status  // Status

  status String @default("PENDING")  status              SponsorshipStatus @default(PENDING)

    

  // Relationships  // Blockchain integration

  milestones Milestone[]  transactionHash     String?

    escrowAddress       String?

  @@map("sponsorships")  

}  @@map("sponsorships")

}

model Milestone {

  id        String   @id @default(cuid())model Milestone {

  createdAt DateTime @default(now())  id          String   @id @default(cuid())

  updatedAt DateTime @updatedAt  createdAt   DateTime @default(now())

    updatedAt   DateTime @updatedAt

  // References  

  sponsorshipId String  treatmentId String

  sponsorship   Sponsorship @relation(fields: [sponsorshipId], references: [id])  treatment   Treatment @relation(fields: [treatmentId], references: [id])

    

  // Milestone details  // Milestone details

  title           String  title             String

  description     String  description       String

  targetDate      DateTime?  expectedDate      DateTime?

  completionDate  DateTime?  completedDate     DateTime?

  payoutAmount    Float  

    // Verification

  // Verification  status            MilestoneStatus @default(PENDING)

  status            String  @default("PENDING")  verificationData  Json?

  verificationData  String?  verifiedBy        String?

  verifiedBy        String?  

  verifiedAt        DateTime?  // Financial impact

    releaseFunds      Boolean @default(false)

  // Provider reference  fundPercentage    Decimal?

  providerId String?  

  provider   ProviderProfile? @relation(fields: [providerId], references: [id])  @@map("milestones")

  }

  @@map("milestones")

}model DataContribution {

  id        String   @id @default(cuid())

model DataContribution {  createdAt DateTime @default(now())

  id        String   @id @default(cuid())  updatedAt DateTime @updatedAt

  createdAt DateTime @default(now())  

  updatedAt DateTime @updatedAt  // Contributor

    userId String

  // User reference  user   User   @relation(fields: [userId], references: [id])

  contributorId String  

  contributor   User   @relation(fields: [contributorId], references: [id])  // Data details

    dataType        DataType

  // Data details  description     String

  dataType    String @default("OTHER")  anonymized      Boolean  @default(true)

  title       String  

  description String  // Research value

    researchValue   Decimal?

  // Access control  rewardAmount    Decimal?

  accessLevel  String  @default("RESTRICTED")  

  sharingTerms String?  // Privacy and access

    accessLevel     AccessLevel @default(RESTRICTED)

  // Blockchain references  sharingTerms    Json?

  ipfsHash        String?  

  encryptionKey   String?  // Storage

  accessNFT       String?  storageHash     String?

    encryptionKey   String?

  // Rewards  

  rewardAmount Float @default(0)  @@map("data_contributions")

  }

  @@map("data_contributions")

}model GovernanceProposal {

  id          String   @id @default(cuid())

model GovernanceProposal {  createdAt   DateTime @default(now())

  id        String   @id @default(cuid())  updatedAt   DateTime @updatedAt

  createdAt DateTime @default(now())  

  updatedAt DateTime @updatedAt  // Proposal details

    title       String

  // Proposal details  description String

  proposer    String  category    ProposalCategory

  title       String  

  description String  // Voting

  category    String @default("OTHER")  votingStart DateTime

    votingEnd   DateTime

  // Voting  status      ProposalStatus @default(ACTIVE)

  votingStart DateTime  

  votingEnd   DateTime  // Results

    votesFor    Int @default(0)

  // Status  votesAgainst Int @default(0)

  status String @default("DRAFT")  

    // Relationships

  // Relationships  votes       GovernanceVote[]

  votes Vote[]  

    @@map("governance_proposals")

  @@map("governance_proposals")}

}

model GovernanceVote {

model Vote {  id         String   @id @default(cuid())

  id        String   @id @default(cuid())  createdAt  DateTime @default(now())

  createdAt DateTime @default(now())  

    // Voter

  // References  userId     String

  proposalId String  user       User     @relation(fields: [userId], references: [id])

  proposal   GovernanceProposal @relation(fields: [proposalId], references: [id])  

  voterId    String  // Vote details

  voter      User              @relation(fields: [voterId], references: [id])  proposalId String

    proposal   GovernanceProposal @relation(fields: [proposalId], references: [id])

  // Vote details  

  choice      String @default("ABSTAIN")  vote       VoteChoice

  votingPower Float  weight     Decimal    @default(1)

    

  @@unique([proposalId, voterId])  // Blockchain verification

  @@map("votes")  transactionHash String?

}  
  @@unique([userId, proposalId])
  @@map("governance_votes")
}

model Document {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  treatmentId String
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
  
  // Document details
  filename    String
  fileType    String
  fileSize    Int
  description String?
  
  // Storage
  storageUrl  String
  storageHash String?
  
  // Access control
  encrypted   Boolean @default(true)
  accessLevel AccessLevel @default(PRIVATE)
  
  @@map("documents")
}

// Enums
enum UserType {
  PATIENT
  SPONSOR
  PROVIDER
  RESEARCHER
  ADMIN
}

enum SponsorType {
  INDIVIDUAL
  ORGANIZATION
  FOUNDATION
  GOVERNMENT
  DAO
}

enum TreatmentType {
  CAR_T_THERAPY
  GENE_THERAPY
  IMMUNOTHERAPY
  REGENERATIVE_MEDICINE
  PRECISION_MEDICINE
  CLINICAL_TRIAL
  SURGERY
  OTHER
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TreatmentStatus {
  PENDING
  APPROVED
  FUNDED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SponsorshipStatus {
  PENDING
  APPROVED
  FUNDED
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  VERIFIED
  FAILED
}

enum DataType {
  MEDICAL_RECORDS
  GENOMIC_DATA
  TREATMENT_OUTCOMES
  LIFESTYLE_DATA
  RESEARCH_PARTICIPATION
  OTHER
}

enum AccessLevel {
  PRIVATE
  RESTRICTED
  RESEARCH_ONLY
  PUBLIC
}

enum ProposalCategory {
  PROTOCOL_UPGRADE
  TREASURY_ALLOCATION
  GOVERNANCE_CHANGE
  PARTNERSHIP
  RESEARCH_INITIATIVE
}

enum ProposalStatus {
  DRAFT
  ACTIVE
  PASSED
  REJECTED
  EXECUTED
}

enum VoteChoice {
  FOR
  AGAINST
  ABSTAIN
}