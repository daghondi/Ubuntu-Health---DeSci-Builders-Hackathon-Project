# Ubuntu Health - Docker Compose Configuration
# Orchestrates all Ubuntu Health services with Ubuntu philosophy integration

version: '3.8'

services:
  # Frontend Service - React/Next.js Application
  frontend:
    build:
      context: ../frontend
      dockerfile: ../deployment/docker/frontend.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NEXT_PUBLIC_SOLANA_NETWORK=devnet
      - NEXT_PUBLIC_UBUNTU_WISDOM_API=http://backend:5000/api/ubuntu-wisdom
    depends_on:
      - backend
      - redis
    volumes:
      - ubuntu_frontend_data:/app/.next
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=frontend"
      - "com.ubuntu-health.philosophy=community-access"

  # Backend Service - Node.js/Express API
  backend:
    build:
      context: ../backend
      dockerfile: ../deployment/docker/backend.Dockerfile
    ports:
      - "5000:5000"
      - "8080:8080"  # Socket.IO for real-time community interactions
    environment:
      - NODE_ENV=production
      - PORT=5000
      - SOCKET_PORT=8080
      - DATABASE_URL=postgresql://ubuntu_user:ubuntu_pass@postgres:5432/ubuntu_health
      - REDIS_URL=redis://redis:6379
      - SOLANA_RPC_URL=https://api.devnet.solana.com
      - ELDER_COUNCIL_MULTISIG=Elder123MultiSigAddress456
      - UBUNTU_TREASURY_ADDRESS=Treasury789UbuntuAddress012
      - JWT_SECRET=UbuntuWisdomSecretKey2024
    depends_on:
      - postgres
      - redis
    volumes:
      - ubuntu_backend_logs:/app/logs
      - ubuntu_cultural_data:/app/cultural-data
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=backend"
      - "com.ubuntu-health.philosophy=community-consensus"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ubuntu_health
      - POSTGRES_USER=ubuntu_user
      - POSTGRES_PASSWORD=ubuntu_pass
      - POSTGRES_INIT_SCRIPTS=/docker-entrypoint-initdb.d/
    volumes:
      - ubuntu_postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=database"
      - "com.ubuntu-health.philosophy=community-memory"

  # Redis Cache and Session Storage
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ubuntu_redis_wisdom
    volumes:
      - ubuntu_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=cache"
      - "com.ubuntu-health.philosophy=collective-memory"

  # IPFS Node for Decentralized Storage
  ipfs:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001"  # P2P swarm
      - "5001:5001"  # API
      - "8081:8080"  # Gateway
    volumes:
      - ubuntu_ipfs_data:/data/ipfs
      - ubuntu_ipfs_staging:/export
    environment:
      - IPFS_PROFILE=server
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=storage"
      - "com.ubuntu-health.philosophy=distributed-knowledge"

  # Nginx Reverse Proxy with Ubuntu Community Load Balancing
  nginx:
    build:
      context: .
      dockerfile: docker/nginx.Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ubuntu_nginx_logs:/var/log/nginx
      - ubuntu_ssl_certs:/etc/nginx/ssl
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ubuntu-community.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=proxy"
      - "com.ubuntu-health.philosophy=community-gateway"

  # Ubuntu Philosophy Wisdom Service
  ubuntu_wisdom:
    build:
      context: ../services/ubuntu-wisdom
      dockerfile: ../../deployment/docker/ubuntu-wisdom.Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - WISDOM_DATABASE_URL=postgresql://ubuntu_user:ubuntu_pass@postgres:5432/ubuntu_health
      - ELDER_COUNCIL_API_KEY=ElderWisdomKey2024Ubuntu
    depends_on:
      - postgres
    volumes:
      - ubuntu_wisdom_data:/app/wisdom-data
      - ubuntu_cultural_content:/app/cultural-content
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=wisdom"
      - "com.ubuntu-health.philosophy=ancestral-knowledge"

  # Community Consensus Validator Service
  consensus_validator:
    build:
      context: ../services/consensus
      dockerfile: ../../deployment/docker/consensus.Dockerfile
    environment:
      - NODE_ENV=production
      - SOLANA_RPC_URL=https://api.devnet.solana.com
      - VALIDATOR_KEYPAIR_PATH=/app/keys/validator-keypair.json
      - ELDER_COUNCIL_MULTISIG=Elder123MultiSigAddress456
      - CONSENSUS_THRESHOLD=0.67
    volumes:
      - ubuntu_validator_keys:/app/keys
      - ubuntu_consensus_logs:/app/logs
    depends_on:
      - backend
      - redis
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=consensus"
      - "com.ubuntu-health.philosophy=collective-decision"

  # Traditional Healing Integration Service
  traditional_healing:
    build:
      context: ../services/traditional-healing
      dockerfile: ../../deployment/docker/traditional-healing.Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - HEALING_DATABASE_URL=postgresql://ubuntu_user:ubuntu_pass@postgres:5432/ubuntu_health
      - ELDER_VERIFICATION_REQUIRED=true
      - SACRED_KNOWLEDGE_ENCRYPTION_KEY=SacredWisdomKey2024
    depends_on:
      - postgres
      - ubuntu_wisdom
    volumes:
      - ubuntu_healing_protocols:/app/healing-protocols
      - ubuntu_sacred_knowledge:/app/sacred-knowledge
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=traditional-healing"
      - "com.ubuntu-health.philosophy=ancestral-medicine"

  # Monitoring Service - Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ubuntu_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=monitoring"
      - "com.ubuntu-health.philosophy=community-awareness"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=ubuntu_admin
      - GF_SECURITY_ADMIN_PASSWORD=UbuntuGrafanaWisdom2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ubuntu_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=dashboard"
      - "com.ubuntu-health.philosophy=collective-insight"

  # Log Aggregation Service
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ubuntu_loki_data:/loki
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=logging"
      - "com.ubuntu-health.philosophy=community-transparency"

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log:ro
      - ubuntu_backend_logs:/app/logs:ro
      - ubuntu_nginx_logs:/var/log/nginx:ro
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - ubuntu_network
    restart: unless-stopped
    labels:
      - "com.ubuntu-health.service=log-collector"
      - "com.ubuntu-health.philosophy=story-gathering"

# Persistent Volumes for Ubuntu Community Data
volumes:
  ubuntu_postgres_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=community-records"
  ubuntu_redis_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=collective-memory"
  ubuntu_ipfs_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=distributed-knowledge"
  ubuntu_ipfs_staging:
    driver: local
    labels:
      - "com.ubuntu-health.data=knowledge-staging"
  ubuntu_frontend_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=community-interface"
  ubuntu_backend_logs:
    driver: local
    labels:
      - "com.ubuntu-health.data=service-chronicles"
  ubuntu_cultural_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=cultural-wisdom"
  ubuntu_wisdom_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=ancestral-knowledge"
  ubuntu_cultural_content:
    driver: local
    labels:
      - "com.ubuntu-health.data=cultural-expressions"
  ubuntu_validator_keys:
    driver: local
    labels:
      - "com.ubuntu-health.data=consensus-authority"
  ubuntu_consensus_logs:
    driver: local
    labels:
      - "com.ubuntu-health.data=decision-records"
  ubuntu_healing_protocols:
    driver: local
    labels:
      - "com.ubuntu-health.data=healing-wisdom"
  ubuntu_sacred_knowledge:
    driver: local
    labels:
      - "com.ubuntu-health.data=sacred-medicine"
  ubuntu_nginx_logs:
    driver: local
    labels:
      - "com.ubuntu-health.data=gateway-chronicles"
  ubuntu_ssl_certs:
    driver: local
    labels:
      - "com.ubuntu-health.data=security-certificates"
  ubuntu_prometheus_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=community-metrics"
  ubuntu_grafana_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=insight-dashboards"
  ubuntu_loki_data:
    driver: local
    labels:
      - "com.ubuntu-health.data=community-stories"

# Ubuntu Community Network
networks:
  ubuntu_network:
    driver: bridge
    labels:
      - "com.ubuntu-health.network=community-connection"
    ipam:
      config:
        - subnet: 172.20.0.0/16
